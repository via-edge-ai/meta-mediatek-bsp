From ac5d7c09a1e6391c9443aa53ca6dea779df2b670 Mon Sep 17 00:00:00 2001
From: Ginny Chen <ginny.chen@mediatek.com>
Date: Wed, 24 Apr 2019 16:54:27 +0800
Subject: [PATCH] libutils:disable-android-function

Signed-off-by: Ginny Chen <ginny.chen@mediatek.com>
---
 libutils/Printer.cpp              |   2 +-
 libutils/RefBase.cpp              |  39 +-
 libutils/SharedBuffer.cpp         |   3 +-
 libutils/String16.cpp             |  13 +-
 libutils/String8.cpp              |   3 +-
 libutils/StrongPointer.cpp        |   3 +-
 libutils/SystemClock.cpp          |   4 +-
 libutils/Unicode.cpp              |  10 +-
 libutils/VectorImpl.cpp           |  20 +-
 libutils/include/utils/Log.h      |  17 +
 libutils/include/utils/Trace.h    |   8 +
 libutils/include/utils/Vector.h   |   8 +-
 libutils/include/utils/safe_iop.h | 699 ++++++++++++++++++++++++++++++
 13 files changed, 791 insertions(+), 38 deletions(-)
 create mode 100644 libutils/include/utils/safe_iop.h

diff --git a/libutils/Printer.cpp b/libutils/Printer.cpp
index cbf042eb56..c1ab0834fa 100644
--- a/libutils/Printer.cpp
+++ b/libutils/Printer.cpp
@@ -88,7 +88,7 @@ void LogPrinter::printLine(const char* string) {
 }
 
 void LogPrinter::printRaw(const char* string) {
-    __android_log_print(mPriority, mLogTag, "%s%s", mPrefix, string);
+    ALOGW("%s%s", mPrefix, string);
 }
 
 
diff --git a/libutils/RefBase.cpp b/libutils/RefBase.cpp
index 8bccb0f5c8..0f5a56e201 100644
--- a/libutils/RefBase.cpp
+++ b/libutils/RefBase.cpp
@@ -17,23 +17,47 @@
 #define LOG_TAG "RefBase"
 // #define LOG_NDEBUG 0
 
+#include <fcntl.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <typeinfo>
+#include <unistd.h>
+
 #include <utils/RefBase.h>
 
-#include <utils/CallStack.h>
+//#include <utils/CallStack.h>
+
+#define ALOG(...) printf(LOG_TAG...)
+
+#ifndef ALOGD
+#if LOG_NDEBUG
+#define ALOGD(...)   ((void)0)
+#else
+#define ALOGD ALOG
+#endif
+#endif
+
+#define ALOGE ALOG
+#define ALOG_ASSERT(cond, ...) ((void)0)//(!(cond)? (abort();) : ((void)0))
 
 #ifndef __unused
 #define __unused __attribute__((__unused__))
 #endif
 
 // compile with refcounting debugging enabled
+// deprecated in yocto
 #define DEBUG_REFS                      0
 
 // whether ref-tracking is enabled by default, if not, trackMe(true, false)
 // needs to be called explicitly
+// deprecated in yocto
 #define DEBUG_REFS_ENABLED_BY_DEFAULT   0
 
 // whether callstack are collected (significantly slows things down)
-#define DEBUG_REFS_CALLSTACK_ENABLED    1
+// deprecated in yocto
+#define DEBUG_REFS_CALLSTACK_ENABLED    0 
 
 // folder where stack traces are saved when DEBUG_REFS is enabled
 // this folder needs to exist and be writable
@@ -424,8 +448,7 @@ void RefBase::decStrong(const void* id) const
 #if PRINT_REFS
     ALOGD("decStrong of %p from %p: cnt=%d\n", this, id, c);
 #endif
-    LOG_ALWAYS_FATAL_IF(BAD_STRONG(c), "decStrong() called on %p too many times",
-            refs);
+    ALOG_ASSERT(c >= 1, "decStrong() called on %p too many times", refs);
     if (c == 1) {
         std::atomic_thread_fence(std::memory_order_acquire);
         refs->mBase->onLastStrongRef(id);
@@ -500,8 +523,7 @@ void RefBase::weakref_type::decWeak(const void* id)
     weakref_impl* const impl = static_cast<weakref_impl*>(this);
     impl->removeWeakRef(id);
     const int32_t c = impl->mWeak.fetch_sub(1, std::memory_order_release);
-    LOG_ALWAYS_FATAL_IF(BAD_WEAK(c), "decWeak called on %p too many times",
-            this);
+    ALOG_ASSERT(c >= 1, "decWeak called on %p too many times", this);
     if (c != 1) return;
     atomic_thread_fence(std::memory_order_acquire);
 
@@ -520,8 +542,6 @@ void RefBase::weakref_type::decWeak(const void* id)
             // Thus we no longer do anything here.  We log this case, since it
             // seems to be extremely rare, and should not normally occur. We
             // used to deallocate mBase here, so this may now indicate a leak.
-            ALOGW("RefBase: Object at %p lost last weak reference "
-                    "before it had a strong reference", impl->mBase);
         } else {
             // ALOGV("Freeing refs %p of old RefBase %p\n", this, impl->mBase);
             delete impl;
@@ -703,9 +723,6 @@ RefBase::~RefBase()
     } else if (mRefs->mStrong.load(std::memory_order_relaxed)
             == INITIAL_STRONG_VALUE) {
         // We never acquired a strong reference on this object.
-        LOG_ALWAYS_FATAL_IF(mRefs->mWeak.load() != 0,
-                "RefBase: Explicit destruction with non-zero weak "
-                "reference count");
         // TODO: Always report if we get here. Currently MediaMetadataRetriever
         // C++ objects are inconsistently managed and sometimes get here.
         // There may be other cases, but we believe they should all be fixed.
diff --git a/libutils/SharedBuffer.cpp b/libutils/SharedBuffer.cpp
index bad98b2746..8f3db1a5af 100644
--- a/libutils/SharedBuffer.cpp
+++ b/libutils/SharedBuffer.cpp
@@ -21,8 +21,9 @@
 #include <stdlib.h>
 #include <string.h>
 
-#include <log/log.h>
+//#include <log/log.h>
 
+#define LOG_ALWAYS_FATAL_IF 
 // ---------------------------------------------------------------------------
 
 namespace android {
diff --git a/libutils/String16.cpp b/libutils/String16.cpp
index e8f1c51841..07432dfec1 100644
--- a/libutils/String16.cpp
+++ b/libutils/String16.cpp
@@ -16,12 +16,15 @@
 
 #include <utils/String16.h>
 
-#include <utils/Log.h>
+//#include <utils/Log.h>
 
 #include <ctype.h>
 
 #include "SharedBuffer.h"
 
+#define ALOG_ASSERT(cond, ...) ((void)0)//(!(cond)? (abort();) : ((void)0))
+#define LOG_ALWAYS_FATAL(...)
+
 namespace android {
 
 static SharedBuffer* gEmptyStringBuf = NULL;
@@ -81,7 +84,7 @@ static char16_t* allocFromUTF8(const char* u8str, size_t u8len)
 
 static char16_t* allocFromUTF16(const char16_t* u16str, size_t u16len) {
     if (u16len >= SIZE_MAX / sizeof(char16_t)) {
-        android_errorWriteLog(0x534e4554, "73826242");
+   //     android_errorWriteLog(0x534e4554, "73826242");
         abort();
     }
 
@@ -193,7 +196,7 @@ status_t String16::setTo(const char16_t* other)
 status_t String16::setTo(const char16_t* other, size_t len)
 {
     if (len >= SIZE_MAX / sizeof(char16_t)) {
-        android_errorWriteLog(0x534e4554, "73826242");
+        //android_errorWriteLog(0x534e4554, "73826242");
         abort();
     }
 
@@ -221,7 +224,7 @@ status_t String16::append(const String16& other)
     }
 
     if (myLen >= SIZE_MAX / sizeof(char16_t) - otherLen) {
-        android_errorWriteLog(0x534e4554, "73826242");
+     //   android_errorWriteLog(0x534e4554, "73826242");
         abort();
     }
 
@@ -247,7 +250,7 @@ status_t String16::append(const char16_t* chrs, size_t otherLen)
     }
 
     if (myLen >= SIZE_MAX / sizeof(char16_t) - otherLen) {
-        android_errorWriteLog(0x534e4554, "73826242");
+        //android_errorWriteLog(0x534e4554, "73826242");
         abort();
     }
 
diff --git a/libutils/String8.cpp b/libutils/String8.cpp
index ad0e72ec1a..160319faf6 100644
--- a/libutils/String8.cpp
+++ b/libutils/String8.cpp
@@ -20,13 +20,14 @@
 #include <utils/String8.h>
 
 #include <utils/Compat.h>
-#include <utils/Log.h>
+//#include <utils/Log.h>
 #include <utils/String16.h>
 
 #include <ctype.h>
 
 #include "SharedBuffer.h"
 
+#define ALOG_ASSERT(cond, ...) ((void)0)//(!(cond)? (abort();) : ((void)0))
 /*
  * Functions outside android is below the namespace android, since they use
  * functions and constants in android namespace.
diff --git a/libutils/StrongPointer.cpp b/libutils/StrongPointer.cpp
index ba52502ec0..ffaa9265c8 100644
--- a/libutils/StrongPointer.cpp
+++ b/libutils/StrongPointer.cpp
@@ -16,8 +16,9 @@
 
 #define LOG_TAG "sp"
 
-#include <log/log.h>
+//#include <log/log.h>
 
+#define LOG_ALWAYS_FATAL(...)
 namespace android {
 
 void sp_report_race() { LOG_ALWAYS_FATAL("sp<> assignment detected data race"); }
diff --git a/libutils/SystemClock.cpp b/libutils/SystemClock.cpp
index 73ec1be969..e7a68fa06a 100644
--- a/libutils/SystemClock.cpp
+++ b/libutils/SystemClock.cpp
@@ -30,7 +30,9 @@
 #include <cutils/compiler.h>
 
 #include <utils/Timers.h>
-#include <utils/Log.h>
+//#include <utils/Log.h>
+
+#define ALOGE
 
 namespace android {
 
diff --git a/libutils/Unicode.cpp b/libutils/Unicode.cpp
index 1086831456..a11eea1f72 100644
--- a/libutils/Unicode.cpp
+++ b/libutils/Unicode.cpp
@@ -18,8 +18,8 @@
 
 #include <utils/Unicode.h>
 #include <limits.h>
-
-#include <log/log.h>
+#include <stddef.h>
+//#include <log/log.h>
 
 #if defined(_WIN32)
 # undef  nhtol
@@ -35,6 +35,8 @@
 # include <netinet/in.h>
 #endif
 
+#define LOG_ALWAYS_FATAL_IF(...) 
+#define LOG_ALWAYS_FATAL(...)
 extern "C" {
 
 static const char32_t kByteMask = 0x000000BF;
@@ -185,7 +187,7 @@ ssize_t utf32_to_utf8_length(const char32_t *src, size_t src_len)
             // If this happens, we would overflow the ssize_t type when
             // returning from this function, so we cannot express how
             // long this string is in an ssize_t.
-            android_errorWriteLog(0x534e4554, "37723026");
+        //    android_errorWriteLog(0x534e4554, "37723026");
             return -1;
         }
         ret += char_len;
@@ -460,7 +462,7 @@ ssize_t utf16_to_utf8_length(const char16_t *src, size_t src_len)
             // If this happens, we would overflow the ssize_t type when
             // returning from this function, so we cannot express how
             // long this string is in an ssize_t.
-            android_errorWriteLog(0x534e4554, "37723026");
+            //android_errorWriteLog(0x534e4554, "37723026");
             return -1;
         }
         ret += char_len;
diff --git a/libutils/VectorImpl.cpp b/libutils/VectorImpl.cpp
index ef3277f420..e19b9750c0 100644
--- a/libutils/VectorImpl.cpp
+++ b/libutils/VectorImpl.cpp
@@ -21,13 +21,15 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
-
-#include <log/log.h>
-
-#include <safe_iop.h>
-
+#include <utils/Log.h>
+#include <utils/safe_iop.h>
 #include "SharedBuffer.h"
 
+#undef   LOG_ALWAYS_FATAL_IF
+#define  LOG_ALWAYS_FATAL_IF(cond, ...) \
+                         ( (cond)? \
+                            (void) 0: \
+                            (void) 0 )
 /*****************************************************************************/
 
 
@@ -59,10 +61,10 @@ VectorImpl::VectorImpl(const VectorImpl& rhs)
 
 VectorImpl::~VectorImpl()
 {
-    ALOGW_IF(mCount,
-        "[%p] subclasses of VectorImpl must call finish_vector()"
-        " in their destructor. Leaking %d bytes.",
-        this, (int)(mCount*mItemSize));
+    //ALOGW(
+        //"[%p] subclasses of VectorImpl must call finish_vector()"
+        //" in their destructor. Leaking %d bytes.",
+        //this, (int)(mCount*mItemSize));
     // We can't call _do_destroy() here because the vtable is already gone. 
 }
 
diff --git a/libutils/include/utils/Log.h b/libutils/include/utils/Log.h
index 42e03e7c44..73c92e1c21 100644
--- a/libutils/include/utils/Log.h
+++ b/libutils/include/utils/Log.h
@@ -4,4 +4,21 @@
 // This path remains strictly to include that header as there are thousands of
 // references to <utils/Log.h> in the tree.
 
+#ifndef LOG_H
+#define LOG_H
+#if 1  //smartdisplay
+#include <stdio.h>
+
+#define ALOG_ASSERT(cond, ...) ((void)0)//(!(cond)? (abort();) : ((void)0))
+#define LOG_ALWAYS_FATAL(...)
+#define LOG_ALWAYS_FATAL_IF(...)
+#define LOG_FATAL_IF(...)
+#define ALOGE printf
+#define ALOGD printf
+#define ALOGW printf
+#define ALOGV printf
+#else
 #include <log/log.h>
+#endif
+
+#endif
diff --git a/libutils/include/utils/Trace.h b/libutils/include/utils/Trace.h
index 5e9229c1e4..6dd3881460 100644
--- a/libutils/include/utils/Trace.h
+++ b/libutils/include/utils/Trace.h
@@ -55,6 +55,14 @@ private:
 
 #define ATRACE_NAME(...)
 #define ATRACE_CALL()
+#define ATRACE_INIT()
+#define ATRACE_GET_ENABLED_TAGS()
+#define ATRACE_ENABLED() 0
+#define ATRACE_BEGIN(name)
+#define ATRACE_END()
+#define ATRACE_ASYNC_BEGIN(name, cookie)
+#define ATRACE_ASYNC_END(name, cookie)
+#define ATRACE_INT(name, value)
 
 #endif // __ANDROID__
 
diff --git a/libutils/include/utils/Vector.h b/libutils/include/utils/Vector.h
index a1a0234e3a..9106166e80 100644
--- a/libutils/include/utils/Vector.h
+++ b/libutils/include/utils/Vector.h
@@ -19,8 +19,8 @@
 
 #include <stdint.h>
 #include <sys/types.h>
-
-#include <log/log.h>
+#include <utils/Log.h>
+//#include <log/log.h>
 #include <utils/TypeHelpers.h>
 #include <utils/VectorImpl.h>
 
@@ -252,13 +252,13 @@ Vector<TYPE>::~Vector() {
 
 template<class TYPE> inline
 Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) {
-    VectorImpl::operator = (rhs);
+    VectorImpl::operator = (static_cast<const VectorImpl&>(rhs));
     return *this;
 }
 
 template<class TYPE> inline
 const Vector<TYPE>& Vector<TYPE>::operator = (const Vector<TYPE>& rhs) const {
-    VectorImpl::operator = (static_cast<const VectorImpl&>(rhs));
+    VectorImpl::operator = (rhs);
     return *this;
 }
 
diff --git a/libutils/include/utils/safe_iop.h b/libutils/include/utils/safe_iop.h
new file mode 100644
index 0000000000..0b558caa43
--- /dev/null
+++ b/libutils/include/utils/safe_iop.h
@@ -0,0 +1,699 @@
+/* safe_iop
+ * License:: released in to the public domain
+ * Author:: Will Drewry <redpig@dataspill.org>
+ * Copyright 2007,2008 redpig@dataspill.org
+ * Some portions copyright The Android Open Source Project
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
+ * OF ANY KIND, either express or implied.
+ * 
+ * To Do:
+ * - Add varargs style interface for safe_<op>()
+ * - Add support for safe conversion
+ * - Add additional sizes to safe_iopf (currently 32-bit only)
+ *   (this will make use of the safe conversion above)
+ * - Add left shift support
+ * - Add more test cases for interfaces (op_mixed)
+ * - Add more tests for edge cases I've missed? and for thoroughness
+ *
+ * History:
+ * = 0.3
+ * - solidified code into a smaller number of macros and functions
+ * - added typeless functions using gcc magic (typeof)
+ * - deprecrated old interfaces (-DSAFE_IOP_COMPAT)
+ * - discover size maximums automagically
+ * - separated test cases for easier understanding
+ * - significantly expanded test cases
+ * - derive type maximums and minimums internally (checked in testing)
+ * = 0.2
+ * - Removed dependence on twos complement arithmetic to allow macro-ized
+ *   definitions
+ * - Added (s)size_t support
+ * - Added (u)int8,16,64 support
+ * - Added portable inlining
+ * - Added support for NULL result pointers
+ * - Added support for header-only use (safe_iop.c only needed for safe_iopf)
+ * = 0.1
+ * - Initial release
+ *
+ * Contributors & thanks:
+ * - peter@valchev.net for his review, comments, and enthusiasm
+ * - thanks to Google for contributing some time
+ */
+
+/* This library supplies a set of standard functions for performing and
+ * checking safe integer operations. The code is based on examples from
+ * https://www.securecoding.cert.org/confluence/display/seccode/INT32-C.+Ensure+that+operations+on+signed+integers+do+not+result+in+overflow
+ *
+ * Inline functions are available for specific operations.  If the result
+ * pointer is NULL, the function will still return 1 or 0 if it would
+ * or would not overflow.  If multiple operations need to be performed,
+ * safe_iopf provides a format-string driven model, but it does not yet support
+ * non-32 bit operations
+ *
+ * NOTE: This code assumes int32_t to be signed.
+ */
+#ifndef _SAFE_IOP_H
+#define _SAFE_IOP_H
+#include <limits.h>  /* for CHAR_BIT */
+#include <assert.h>  /* for type enforcement */
+
+typedef enum { SAFE_IOP_TYPE_S32 = 1,
+               SAFE_IOP_TYPE_U32,
+               SAFE_IOP_TYPE_DEFAULT = SAFE_IOP_TYPE_S32,
+               } safe_type_t;
+
+#define SAFE_IOP_TYPE_PREFIXES "us"
+
+/* use a nice prefix :) */
+#define __sio(x) OPAQUE_SAFE_IOP_PREFIX_ ## x
+#define OPAQUE_SAFE_IOP_PREFIX_var(x) __sio(VARIABLE_ ## x)
+#define OPAQUE_SAFE_IOP_PREFIX_m(x) __sio(MACRO_ ## x)
+
+
+/* A recursive macro which safely multiplies the given type together.
+ * _ptr may be NULL.
+ * mixed types or mixed sizes will unconditionally return 0;
+ */
+#define OPAQUE_SAFE_IOP_PREFIX_MACRO_smax(_a) \
+  ((typeof(_a))(~((typeof(_a)) 1 << ((sizeof(typeof(_a)) * CHAR_BIT) - 1))))
+#define OPAQUE_SAFE_IOP_PREFIX_MACRO_smin(_a) \
+  ((typeof(_a))(-__sio(m)(smax)(_a) - 1))
+#define OPAQUE_SAFE_IOP_PREFIX_MACRO_umax(_a) ((typeof(_a))(~((typeof(_a)) 0)))
+
+#define OPAQUE_SAFE_IOP_PREFIX_MACRO_type_enforce(__A, __B) \
+  ((((__sio(m)(smin)(__A) <= ((typeof(__A))0)) && \
+     (__sio(m)(smin)(__B) <= ((typeof(__B))0))) || \
+   (((__sio(m)(smin)(__A) > ((typeof(__A))0))) && \
+     (__sio(m)(smin)(__B) > ((typeof(__B))0)))) && \
+   (sizeof(typeof(__A)) == sizeof(typeof(__B)))) 
+
+
+/* We use a non-void wrapper for assert(). This allows us to factor it away on
+ * -DNDEBUG but still have conditionals test the result (and optionally return
+ *  false).
+ */
+#if defined(NDEBUG)
+#  define OPAQUE_SAFE_IOP_PREFIX_MACRO_assert(x) (x)
+#else
+#  define OPAQUE_SAFE_IOP_PREFIX_MACRO_assert(x) ({ assert(x); 1; })
+#endif
+
+
+/* Primary interface macros */
+/* type checking is compiled out if NDEBUG supplied. */
+#define safe_add(_ptr, __a, __b) \
+ ({ int __sio(var)(ok) = 0; \
+    typeof(__a) __sio(var)(_a) = (__a); \
+    typeof(__b) __sio(var)(_b) = (__b); \
+    typeof(_ptr) __sio(var)(p) = (_ptr); \
+    if (__sio(m)(assert)(__sio(m)(type_enforce)(__sio(var)(_a), \
+                                                __sio(var)(_b)))) { \
+      if (__sio(m)(smin)(__sio(var)(_a)) <= ((typeof(__sio(var)(_a)))0)) { \
+        __sio(var)(ok) = safe_sadd(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } else { \
+        __sio(var)(ok) = safe_uadd(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } \
+    } \
+    __sio(var)(ok); })
+
+#define safe_add3(_ptr, _A, _B, _C) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_add(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_add((_ptr), __sio(var)(r), __sio(var)(c))); })
+
+#define safe_add4(_ptr, _A, _B, _C, _D) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_add(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_add(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_add((_ptr), __sio(var)(r), (__sio(var)(d)))); })
+
+#define safe_add5(_ptr, _A, _B, _C, _D, _E) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_E) __sio(var)(e) = (_E); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_add(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_add(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_add(&(__sio(var)(r)), __sio(var)(r), __sio(var)(d)) && \
+   safe_add((_ptr), __sio(var)(r), __sio(var)(e))); })
+
+#define safe_sub(_ptr, __a, __b) \
+ ({ int __sio(var)(ok) = 0; \
+    typeof(__a) __sio(var)(_a) = (__a); \
+    typeof(__b) __sio(var)(_b) = (__b); \
+    typeof(_ptr) __sio(var)(p) = (_ptr); \
+    if (__sio(m)(assert)(__sio(m)(type_enforce)(__sio(var)(_a), \
+                                                __sio(var)(_b)))) { \
+      if (__sio(m)(umax)(__sio(var)(_a)) <= ((typeof(__sio(var)(_a)))0)) { \
+        __sio(var)(ok) = safe_ssub(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } else { \
+        __sio(var)(ok) = safe_usub(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } \
+    } \
+    __sio(var)(ok); })
+
+/* These are sequentially performed */
+#define safe_sub3(_ptr, _A, _B, _C) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_sub(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_sub((_ptr), __sio(var)(r), __sio(var)(c))); })
+
+#define safe_sub4(_ptr, _A, _B, _C, _D) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_sub(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_sub(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_sub((_ptr), __sio(var)(r), (__sio(var)(d)))); })
+
+#define safe_sub5(_ptr, _A, _B, _C, _D, _E) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_E) __sio(var)(e) = (_E); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_sub(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_sub(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+    safe_sub(&(__sio(var)(r)), __sio(var)(r), __sio(var)(d)) && \
+    safe_sub((_ptr), __sio(var)(r), __sio(var)(e))); })
+
+
+ 
+#define safe_mul(_ptr, __a, __b) \
+ ({ int __sio(var)(ok) = 0; \
+    typeof(__a) __sio(var)(_a) = (__a); \
+    typeof(__b) __sio(var)(_b) = (__b); \
+    typeof(_ptr) __sio(var)(p) = (_ptr); \
+    if (__sio(m)(assert)(__sio(m)(type_enforce)(__sio(var)(_a), \
+                                                __sio(var)(_b)))) { \
+      if (__sio(m)(umax)(__sio(var)(_a)) <= ((typeof(__sio(var)(_a)))0)) { \
+        __sio(var)(ok) = safe_smul(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } else { \
+        __sio(var)(ok) = safe_umul(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } \
+    } \
+    __sio(var)(ok); })
+
+#define safe_mul3(_ptr, _A, _B, _C) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_mul(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_mul((_ptr), __sio(var)(r), __sio(var)(c))); })
+
+#define safe_mul4(_ptr, _A, _B, _C, _D) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_mul(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_mul(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_mul((_ptr), __sio(var)(r), (__sio(var)(d)))); })
+
+#define safe_mul5(_ptr, _A, _B, _C, _D, _E) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_E) __sio(var)(e) = (_E); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_mul(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_mul(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_mul(&(__sio(var)(r)), __sio(var)(r), __sio(var)(d)) && \
+   safe_mul((_ptr), __sio(var)(r), __sio(var)(e))); })
+
+#define safe_div(_ptr, __a, __b) \
+ ({ int __sio(var)(ok) = 0; \
+    typeof(__a) __sio(var)(_a) = (__a); \
+    typeof(__b) __sio(var)(_b) = (__b); \
+    typeof(_ptr) __sio(var)(p) = (_ptr); \
+    if (__sio(m)(assert)(__sio(m)(type_enforce)(__sio(var)(_a), \
+                                                __sio(var)(_b)))) { \
+      if (__sio(m)(umax)(__sio(var)(_a)) <= ((typeof(__sio(var)(_a)))0)) { \
+        __sio(var)(ok) = safe_sdiv(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } else { \
+        __sio(var)(ok) = safe_udiv(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } \
+    } \
+    __sio(var)(ok); })
+
+#define safe_div3(_ptr, _A, _B, _C) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_div(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_div((_ptr), __sio(var)(r), __sio(var)(c))); })
+
+#define safe_div4(_ptr, _A, _B, _C, _D) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_div(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_div(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_div((_ptr), __sio(var)(r), (__sio(var)(d)))); })
+
+#define safe_div5(_ptr, _A, _B, _C, _D, _E) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_E) __sio(var)(e) = (_E); \
+   typeof(_A) __sio(var)(r) = 0; \
+  (safe_div(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+   safe_div(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+   safe_div(&(__sio(var)(r)), __sio(var)(r), __sio(var)(d)) && \
+   safe_div((_ptr), __sio(var)(r), __sio(var)(e))); })
+
+#define safe_mod(_ptr, __a, __b) \
+ ({ int __sio(var)(ok) = 0; \
+    typeof(__a) __sio(var)(_a) = (__a); \
+    typeof(__b) __sio(var)(_b) = (__b); \
+    typeof(_ptr) __sio(var)(p) = (_ptr); \
+    if (__sio(m)(assert)(__sio(m)(type_enforce)(__sio(var)(_a), \
+                                                __sio(var)(_b)))) { \
+      if (__sio(m)(umax)(__sio(var)(_a)) <= ((typeof(__sio(var)(_a)))0)) { \
+        __sio(var)(ok) = safe_smod(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } else { \
+        __sio(var)(ok) = safe_umod(__sio(var)(p), \
+                                   __sio(var)(_a), \
+                                   __sio(var)(_b)); \
+      } \
+    } \
+    __sio(var)(ok); })
+
+#define safe_mod3(_ptr, _A, _B, _C) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_mod(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_mod((_ptr), __sio(var)(r), __sio(var)(c))); })
+
+#define safe_mod4(_ptr, _A, _B, _C, _D) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C); \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_mod(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_mod(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+    safe_mod((_ptr), __sio(var)(r), (__sio(var)(d)))); })
+
+#define safe_mod5(_ptr, _A, _B, _C, _D, _E) \
+({ typeof(_A) __sio(var)(a) = (_A); \
+   typeof(_B) __sio(var)(b) = (_B); \
+   typeof(_C) __sio(var)(c) = (_C), \
+   typeof(_D) __sio(var)(d) = (_D); \
+   typeof(_E) __sio(var)(e) = (_E); \
+   typeof(_A) __sio(var)(r) = 0; \
+   (safe_mod(&(__sio(var)(r)), __sio(var)(a), __sio(var)(b)) && \
+    safe_mod(&(__sio(var)(r)), __sio(var)(r), __sio(var)(c)) && \
+    safe_mod(&(__sio(var)(r)), __sio(var)(r), __sio(var)(d)) && \
+    safe_mod((_ptr), __sio(var)(r), __sio(var)(e))); })
+
+/*** Safe integer operation implementation macros ***/
+
+#define safe_uadd(_ptr, _a, _b) \
+ ({ int __sio(var)(ok) = 0; \
+    if ((typeof(_a))(_b) <= (typeof(_a))(__sio(m)(umax)(_a) - (_a))) { \
+      if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) + (_b); } \
+      __sio(var)(ok) = 1; \
+    } __sio(var)(ok); })
+
+#define safe_sadd(_ptr, _a, _b) \
+  ({ int __sio(var)(ok) = 1; \
+     if (((_b) > (typeof(_a))0) && ((_a) > (typeof(_a))0)) { /*>0*/ \
+       if ((_a) > (typeof(_a))(__sio(m)(smax)(_a) - (_b))) __sio(var)(ok) = 0; \
+     } else if (!((_b) > (typeof(_a))0) && !((_a) > (typeof(_a))0)) { /*<0*/ \
+       if ((_a) < (typeof(_a))(__sio(m)(smin)(_a) - (_b))) __sio(var)(ok) = 0; \
+     } \
+     if (__sio(var)(ok) && (_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) + (_b); } \
+     __sio(var)(ok); })
+
+#define safe_usub(_ptr, _a, _b) \
+  ({ int __sio(var)(ok) = 0; \
+     if ((_a) >= (_b)) { \
+       if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) - (_b); } \
+       __sio(var)(ok) = 1; \
+     } \
+     __sio(var)(ok); }) 
+
+#define safe_ssub(_ptr, _a, _b) \
+  ({ int __sio(var)(ok) = 0; \
+     if (!((_b) <= 0 && (_a) > (__sio(m)(smax)(_a) + (_b))) && \
+         !((_b) > 0 && (_a) < (__sio(m)(smin)(_a) + (_b)))) { \
+         __sio(var)(ok) = 1; \
+         if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) - (_b); } \
+     } \
+     __sio(var)(ok); }) 
+
+#define safe_umul(_ptr, _a, _b) \
+  ({ int __sio(var)(ok) = 0; \
+     if (!(_b) || (_a) <= (__sio(m)(umax)(_a) / (_b))) { \
+       __sio(var)(ok) = 1; \
+       if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) * (_b); } \
+     } \
+     __sio(var)(ok); }) 
+
+#define safe_smul(_ptr, _a, _b) \
+  ({ int __sio(var)(ok) = 1; \
+    if ((_a) > 0) {  /* a is positive */ \
+      if ((_b) > 0) {  /* b and a are positive */ \
+        if ((_a) > (__sio(m)(smax)(_a) / (_b))) { \
+          __sio(var)(ok) = 0; \
+        } \
+      } /* end if a and b are positive */ \
+      else { /* a positive, b non-positive */ \
+        if ((_b) < (__sio(m)(smin)(_a) / (_a))) { \
+          __sio(var)(ok) = 0; \
+        } \
+      } /* a positive, b non-positive */ \
+    } /* end if a is positive */ \
+    else { /* a is non-positive */ \
+      if ((_b) > 0) { /* a is non-positive, b is positive */ \
+        if ((_a) < (__sio(m)(smin)(_a) / (_b))) { \
+        __sio(var)(ok) = 0; \
+        } \
+      } /* end if a is non-positive, b is positive */ \
+      else { /* a and b are non-positive */ \
+        if( ((_a) != 0) && ((_b) < (__sio(m)(smax)(_a) / (_a)))) { \
+          __sio(var)(ok) = 0; \
+        } \
+      } /* end if a and b are non-positive */ \
+    } /* end if a is non-positive */ \
+    if (__sio(var)(ok) && (_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) * (_b); } \
+    __sio(var)(ok); }) 
+
+/* div-by-zero is the only thing addressed */
+#define safe_udiv(_ptr, _a, _b) \
+ ({ int __sio(var)(ok) = 0; \
+    if ((_b) != 0) { \
+      if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) / (_b); } \
+      __sio(var)(ok) = 1; \
+    } \
+    __sio(var)(ok); })
+
+/* Addreses div by zero and smin -1 */
+#define safe_sdiv(_ptr, _a, _b) \
+ ({ int __sio(var)(ok) = 0; \
+    if ((_b) != 0 && \
+        (((_a) != __sio(m)(smin)(_a)) || ((_b) != (typeof(_b))-1))) { \
+      if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) / (_b); } \
+      __sio(var)(ok) = 1; \
+    } \
+    __sio(var)(ok); })
+
+#define safe_umod(_ptr, _a, _b) \
+ ({ int __sio(var)(ok) = 0; \
+    if ((_b) != 0) { \
+      if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) % (_b); } \
+      __sio(var)(ok) = 1; \
+    } \
+    __sio(var)(ok); })
+
+#define safe_smod(_ptr, _a, _b) \
+ ({ int __sio(var)(ok) = 0; \
+    if ((_b) != 0 && \
+        (((_a) != __sio(m)(smin)(_a)) || ((_b) != (typeof(_b))-1))) { \
+      if ((_ptr)) { *((typeof(_a)*)(_ptr)) = (_a) % (_b); } \
+      __sio(var)(ok) = 1; \
+    } \
+    __sio(var)(ok); })
+
+#if SAFE_IOP_COMPAT
+/* These are used for testing for easy type enforcement */
+#include <sys/types.h>
+#include <limits.h>
+
+#ifndef SAFE_IOP_INLINE
+#  if defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 &&  __GNUC_MINOR__ > 0)
+#    define SAFE_IOP_INLINE __attribute__((always_inline)) static inline
+#  else
+#    define SAFE_IOP_INLINE static inline
+#  endif
+#endif
+
+#define MAKE_UADD(_prefix, _bits, _type, _max) \
+  SAFE_IOP_INLINE \
+  int safe_add##_prefix##_bits (_type *result, _type value, _type a) { \
+    return safe_uadd(result, value, a); \
+  }
+
+#define MAKE_SADD(_prefix, _bits, _type, _max) \
+  SAFE_IOP_INLINE \
+  int safe_add##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_sadd(result, value, a); \
+  }
+
+#define MAKE_USUB(_prefix, _bits, _type) \
+  SAFE_IOP_INLINE \
+  int safe_sub##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_usub(result, value, a); \
+  }
+
+#define MAKE_SSUB(_prefix, _bits, _type, _min, _max) \
+  SAFE_IOP_INLINE \
+  int safe_sub##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_ssub(result, value, a); \
+  }
+
+#define MAKE_UMUL(_prefix, _bits, _type, _max) \
+  SAFE_IOP_INLINE \
+  int safe_mul##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_umul(result, value, a); \
+  }
+
+
+#define MAKE_SMUL(_prefix, _bits, _type, _max, _min) \
+  SAFE_IOP_INLINE \
+  int safe_mul##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_smul(result, value, a); \
+  }
+
+#define MAKE_UDIV(_prefix, _bits, _type) \
+  SAFE_IOP_INLINE \
+  int safe_div##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_udiv(result, value, a); \
+  }
+
+#define MAKE_SDIV(_prefix, _bits, _type, _min) \
+  SAFE_IOP_INLINE \
+  int safe_div##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_sdiv(result, value, a); \
+  }
+
+#define MAKE_UMOD(_prefix, _bits, _type) \
+  SAFE_IOP_INLINE \
+  int safe_mod##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_umod(result, value, a); \
+  }
+
+#define MAKE_SMOD(_prefix, _bits, _type, _min) \
+  SAFE_IOP_INLINE \
+  int safe_mod##_prefix##_bits(_type *result, _type value, _type a) { \
+    return safe_smod(result, value, a); \
+  }
+
+/* __LP64__ is given by GCC. Without more work, this is bound to GCC. */
+#if __LP64__ == 1 || __SIZEOF_LONG__ > __SIZEOF_INT__
+#  define SAFE_INT64_MAX 0x7fffffffffffffffL
+#  define SAFE_UINT64_MAX 0xffffffffffffffffUL
+#  define SAFE_INT64_MIN (-SAFE_INT64_MAX - 1L)
+#elif __SIZEOF_LONG__ == __SIZEOF_INT__
+#  define SAFE_INT64_MAX 0x7fffffffffffffffLL
+#  define SAFE_UINT64_MAX 0xffffffffffffffffULL
+#  define SAFE_INT64_MIN (-SAFE_INT64_MAX - 1LL)
+#else
+#  warning "64-bit support disabled"
+#  define SAFE_IOP_NO_64 1
+#endif
+
+/* Assumes SSIZE_MAX */
+#ifndef SSIZE_MIN
+#  if SSIZE_MAX == LONG_MAX
+#    define SSIZE_MIN LONG_MIN
+#  elif SSIZE_MAX == LONG_LONG_MAX
+#    define SSIZE_MIN LONG_LONG_MIN
+#  else
+#    error "SSIZE_MIN is not defined and could not be guessed"
+#  endif
+#endif
+
+
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_UADD(u, 64, u_int64_t, SAFE_UINT64_MAX)
+#endif
+MAKE_UADD(,szt, size_t, SIZE_MAX)
+MAKE_UADD(u, 32, u_int32_t, UINT_MAX)
+MAKE_UADD(u, 16, u_int16_t, USHRT_MAX)
+MAKE_UADD(u,  8, u_int8_t, UCHAR_MAX)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_SADD(s, 64, int64_t, SAFE_INT64_MAX)
+#endif
+MAKE_SADD(s, szt, ssize_t, SSIZE_MAX)
+MAKE_SADD(s, 32, int32_t, INT_MAX)
+MAKE_SADD(s, 16, int16_t, SHRT_MAX)
+MAKE_SADD(s,  8, int8_t, SCHAR_MAX)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_USUB(u, 64, u_int64_t)
+#endif
+MAKE_USUB(, szt, size_t)
+MAKE_USUB(u, 32, u_int32_t)
+MAKE_USUB(u, 16, u_int16_t)
+MAKE_USUB(u, 8, u_int8_t)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_SSUB(s, 64, int64_t, SAFE_INT64_MIN, SAFE_INT64_MAX)
+#endif
+MAKE_SSUB(s, szt, ssize_t, SSIZE_MIN, SSIZE_MAX)
+MAKE_SSUB(s, 32, int32_t, INT_MIN, INT_MAX)
+MAKE_SSUB(s, 16, int16_t, SHRT_MIN, SHRT_MAX)
+MAKE_SSUB(s,  8, int8_t, SCHAR_MIN, SCHAR_MAX)
+
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_UMUL(u, 64, u_int64_t, SAFE_UINT64_MAX)
+#endif
+MAKE_UMUL(, szt, size_t, SIZE_MAX)
+MAKE_UMUL(u, 32, u_int32_t, UINT_MAX)
+MAKE_UMUL(u, 16, u_int16_t, USHRT_MAX)
+MAKE_UMUL(u, 8, u_int8_t,  UCHAR_MAX)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_SMUL(s, 64, int64_t, SAFE_INT64_MAX, SAFE_INT64_MIN)
+#endif
+MAKE_SMUL(s, szt, ssize_t, SSIZE_MAX, SSIZE_MIN)
+MAKE_SMUL(s, 32, int32_t, INT_MAX, INT_MIN)
+MAKE_SMUL(s, 16, int16_t, SHRT_MAX, SHRT_MIN)
+MAKE_SMUL(s,  8, int8_t,  SCHAR_MAX, SCHAR_MIN)
+
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_UDIV(u, 64, u_int64_t)
+#endif
+MAKE_UDIV(, szt, size_t)
+MAKE_UDIV(u, 32, u_int32_t)
+MAKE_UDIV(u, 16, u_int16_t)
+MAKE_UDIV(u,  8, u_int8_t)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_SDIV(s, 64, int64_t, SAFE_INT64_MIN)
+#endif
+MAKE_SDIV(s, szt, ssize_t, SSIZE_MIN)
+MAKE_SDIV(s, 32, int32_t, INT_MIN)
+MAKE_SDIV(s, 16, int16_t, SHRT_MIN)
+MAKE_SDIV(s,  8, int8_t,  SCHAR_MIN)
+
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_UMOD(u, 64, u_int64_t)
+#endif
+MAKE_UMOD(, szt, size_t)
+MAKE_UMOD(u, 32, u_int32_t)
+MAKE_UMOD(u, 16, u_int16_t)
+MAKE_UMOD(u,  8, u_int8_t)
+
+#ifndef SAFE_IOP_NO_64
+  MAKE_SMOD(s, 64, int64_t, SAFE_INT64_MIN)
+#endif
+MAKE_SMOD(s, szt, ssize_t, SSIZE_MIN)
+MAKE_SMOD(s, 32, int32_t, INT_MIN)
+MAKE_SMOD(s, 16, int16_t, SHRT_MIN)
+MAKE_SMOD(s, 8, int8_t,  SCHAR_MIN)
+
+/* Cleanup the macro spam */
+#undef MAKE_SMUL
+#undef MAKE_UMUL
+#undef MAKE_SSUB
+#undef MAKE_USUB
+#undef MAKE_SADD
+#undef MAKE_UADD
+#undef MAKE_UDIV
+#undef MAKE_SDIV
+#undef MAKE_UMOD
+#undef MAKE_SMOD
+
+#endif  /* SAFE_IOP_COMPAT */
+
+
+
+/* safe_iopf
+ *
+ * Takes in a character array which specifies the operations
+ * to perform on a given value. The value will be assumed to be
+ * of the type specified for each operation.
+ *
+ * Currently accepted format syntax is:
+ *   [type_marker]operation...
+ * The type marker may be any of the following:
+ * - s32 for signed int32
+ * - u32 for unsigned int32
+ * If no type_marker is specified, it is assumed to be s32.
+ *
+ * Currently, this only performs correctly with 32-bit integers.
+ *
+ * The operation must be one of the following:
+ * - * -- multiplication
+ * - / -- division
+ * - - -- subtraction
+ * - + -- addition
+ * - % -- modulo (remainder)
+ * 
+ * Whitespace will be ignored.
+ *
+ * Args:
+ * - pointer to the final result  (this must be at least the size of int32)
+ * - array of format characters
+ * - all remaining arguments are derived from the format
+ * Output:
+ * - Returns 1 on success leaving the result in value
+ * - Returns 0 on failure leaving the contents of value *unknown*
+ */
+
+int safe_iopf(void *result, const char *const fmt, ...);
+
+
+#endif  /* _SAFE_IOP_H */
-- 
2.18.0

